# Generated by Django 3.0.3 on 2020-09-17 21:28

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('DisablingCondition', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0)),
                ('EnrollmentID', models.CharField(default=None, max_length=32, primary_key=True, serialize=False)),
                ('ProjectCategory', models.TextField(choices=[('HUD:CoC-HomelessPrevention', 'HUD:CoC-HomelessPrevention'), ('HUD:COC-Permanent Supportive Housing', 'HUD:COC-Permanent Supportive Housing'), ('HUD:COC-Rapid Re-Housing', 'HUD:COC-Rapid Re-Housing'), ('HUD:CoC - Supportive Services Only', 'HUD:CoC - Supportive Services Only'), ('HUD:CoC - SSO Coordinated Entry', 'HUD:CoC - SSO Coordinated Entry'), ('HUD:CoC - Traditional Housing', 'HUD:CoC - Traditional Housing'), ('HUD:CoC - Safe Haven', 'HUD:CoC - Safe Haven'), ('HUD:CoC - Single Room Occupancy', 'HUD:CoC - Single Room Occupancy'), ('HUD:CoC - Youth Homeless Demonstration Program', 'HUD:CoC - Youth Homeless Demonstration Program'), ('HUD:CoC - Joint Component TH/RRH', 'HUD:CoC - Joint Component TH/RRH'), ('HUD:HOPWA – Hotel/Motel Vouchers', 'HUD:HOPWA – Hotel/Motel Vouchers'), ('HUD:HOPWA – Housing Information', 'HUD:HOPWA – Housing Information'), ('HUD:HOPWA – Permanent Housing (facility based or TBRA)', 'HUD:HOPWA – Permanent Housing (facility based or TBRA)'), ('HUD:HOPWA – Permanent Housing Placement', 'HUD:HOPWA – Permanent Housing Placement'), ('HUD:HOPWA – Short-Term Rent, Mortgage, Utility assistance', 'HUD:HOPWA – Short-Term Rent, Mortgage, Utility assistance'), ('HUD:HOPWA – Short-Term Supportive Facility', 'HUD:HOPWA – Short-Term Supportive Facility'), ('HUD:HOPWA – Transitional Housing', 'HUD:HOPWA – Transitional Housing'), ('VA: HCHV CRS - EH', 'VA: HCHV CRS - EH'), ('VA: HCHV - Low Demand Safe Haven', 'VA: HCHV - Low Demand Safe Haven'), ('VA:Grant Per Diem – Bridge Housing', 'VA:Grant Per Diem – Bridge Housing'), ('VA:Grant Per Diem – Low Demand', 'VA:Grant Per Diem – Low Demand'), ('VA:Grant Per Diem – Hospital to Housing', 'VA:Grant Per Diem – Hospital to Housing'), ('VA:Grant Per Diem – Clinical Treatment', 'VA:Grant Per Diem – Clinical Treatment'), ('VA:Grant Per Diem – Service Intensive Transitional Housing', 'VA:Grant Per Diem – Service Intensive Transitional Housing'), ('VA:Grant Per Diem – Transition in Place', 'VA:Grant Per Diem – Transition in Place'), ('VA:Grant Per Diem – Case Management / Housing Retention', 'VA:Grant Per Diem – Case Management / Housing Retention'), ('VA: SSVF - Homelessness Prevention', 'VA: SSVF - Homelessness Prevention'), ('VA: SSVF - Rapid Re-Housing', 'VA: SSVF - Rapid Re-Housing')], default=None, null=True)),
                ('EntryDate', models.DateField(null=True)),
                ('ExitDate', models.DateField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Homeless',
            fields=[
                ('PersonalId', models.CharField(default=None, max_length=32, primary_key=True, serialize=False)),
                ('FirstName', models.CharField(blank=True, max_length=128, null=True)),
                ('MiddleName', models.CharField(blank=True, max_length=128, null=True)),
                ('LastName', models.CharField(blank=True, max_length=128, null=True)),
                ('NameSuffix', models.CharField(blank=True, max_length=128, null=True)),
                ('NameDataQuality', models.IntegerField(choices=[(1, 'Full Name Reported'), (2, 'Partial Name Reported'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('SSN', models.CharField(blank=True, max_length=11, null=True)),
                ('SSNDataQuality', models.IntegerField(choices=[(1, 'Full SSN Reported'), (2, 'Partial SSN Reported'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('DOB', models.DateField(blank=True, null=True)),
                ('DOBDataQuality', models.IntegerField(choices=[(1, 'Full DOB Reported'), (2, 'Partial DOB Reported'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('Race', models.IntegerField(choices=[(1, 'American Indian or Alaskan Native'), (2, 'Asian'), (3, 'Black or African American'), (4, 'Native Hawaiian or Pacific Islander'), (5, 'White'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('Ethnicity', models.IntegerField(choices=[(0, 'Non Hispanic/Non Latino'), (1, 'Hispanic/Latino'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('Gender', models.IntegerField(choices=[(0, 'Female'), (1, 'Male'), (3, 'Trans Female'), (4, 'Trans Male'), (5, 'Gender Non-Conforming'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('VeteranStatus', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('PhoneNumberPrefix', models.CharField(blank=True, max_length=3, null=True)),
                ('PhoneNumber', models.CharField(blank=True, max_length=128, null=True)),
                ('Email', models.EmailField(blank=True, max_length=70, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('productName', models.CharField(max_length=100)),
                ('productId', models.CharField(blank=True, default=None, max_length=32, primary_key=True, serialize=False)),
                ('costPerItem', models.FloatField()),
                ('unitsAvailable', models.IntegerField()),
                ('serviceProvider', models.TextField(choices=[('FP', 'Food Pantry'), ('DIC', 'Drop-in Centre'), ('SH', 'Shelter Home'), ('SK', 'Soup Kitchen'), ('NA', 'Not Available'), ('OTH', 'Others')])),
                ('category', models.TextField(choices=[('Shoes', 'Shoes'), ('Clothing', 'Clothing'), ('MealPass', 'Meal Pass'), ('TransportPass', 'Transport Pass'), ('PetFood', 'Pet Food'), ('PersonalHygieneItems', 'Personal Hygiene Items'), ('RainGear', 'Rain Gear')], default=None)),
            ],
        ),
        migrations.CreateModel(
            name='UserNameAndIdMapping',
            fields=[
                ('user_name', models.CharField(max_length=32, primary_key=True, serialize=False, unique=True)),
                ('user_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='W1ServicesProvidedHOPWA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateOfService', models.DateField()),
                ('TypeOfService', models.IntegerField(choices=[(1, 'Adult day care and personal assistance'), (2, 'Case management'), (3, 'Child care'), (4, 'Criminal justice/legal services'), (5, 'Education'), (6, 'Employment and training services'), (7, 'Food/meals/nutritional services'), (8, 'Health/medical care'), (9, 'Life skills training'), (10, 'Mental health care/counseling'), (11, 'Outreach and/or engagement'), (12, 'Substance abuse services/treatment'), (13, 'Transportation'), (14, 'Other HOPWA funded service')])),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='W1ServicesProvidedHOPWA_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='VeteranInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('YearEnteredMilitaryService', models.PositiveIntegerField()),
                ('YearSeparatedFromMilitaryService', models.PositiveIntegerField()),
                ('TheatreOfOperations_WorldWar2', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('TheatreOfOperations_KoreanWar', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('TheatreOfOperations_VietnamWar', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('TheatreOfOperations_PersianGulfWar', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('TheatreOfOperations_Afghanistan', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('TheatreOfOperations_Iraq_IraqiFreedom', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('TheatreOfOperations_Iraq_NewDawn', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('TheatreOfOperations_OtherPeacekeepingOperations', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('BranchOfMilitary', models.IntegerField(choices=[(1, 'Army'), (2, 'Air Force'), (3, 'Navy'), (4, 'Marines'), (6, 'Coast Guard'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('DischargeStatus', models.IntegerField(choices=[(1, 'Honorable'), (2, 'General under honorable conditions'), (6, 'Under other than honorable conditions (OTH)'), (4, 'Bad conduct'), (5, 'Dishonorable'), (7, 'Uncharacterized'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='VeteranInformation_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='Transactions',
            fields=[
                ('transactionId', models.CharField(default=None, max_length=32, primary_key=True, serialize=False)),
                ('totalAmount', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('personalId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='StreetCardServices.Homeless')),
            ],
        ),
        migrations.CreateModel(
            name='TransactionDetails',
            fields=[
                ('transactionDetailId', models.CharField(default=None, max_length=32, primary_key=True, serialize=False)),
                ('unitPurchased', models.IntegerField()),
                ('productId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='StreetCardServices.Product')),
                ('transactionId', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='StreetCardServices.Transactions')),
            ],
        ),
        migrations.CreateModel(
            name='TCellCD4AndViralLoadHOPWA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('InformationDate', models.DateField()),
                ('TCellCD4CountAvailable', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('IfYesTCellCount', models.IntegerField(validators=[django.core.validators.MaxValueValidator(1500), django.core.validators.MinValueValidator(0)])),
                ('HowWasTheInformationObtained', models.IntegerField(choices=[(1, 'Medical Report'), (2, 'Client Report'), (3, 'Other')])),
                ('ViralLoadInformationAvailable', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('ViralLoadCount', models.IntegerField(validators=[django.core.validators.MaxValueValidator(999999), django.core.validators.MinValueValidator(0)])),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='TCellCD4AndViralLoadHOPWA_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='SSVFHPTargetingCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ReferredByCoordinatedEntry', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('CurrentHousingLossExpectedWithin', models.IntegerField(choices=[(0, '0-6 days'), (1, '7-13 days'), (2, '14-21 days'), (3, 'More than 21 days (0 points)')])),
                ('CurrentHouseholdIncomeIsZeroDollars', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('AnnualHouseholdGrossIncomeAmount', models.IntegerField(choices=[(0, '0-14% of Area Median Income (AMI) for household size'), (1, '15-30% of AMI for household size'), (2, 'More than 30% of AMI for household size (0 points)')])),
                ('SuddenAndSignificantDecreaseIncashIncome', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('MajorChangeInHouseholdCompositionInPastTwelveMonths', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('RentalEvictionsWithinThePastSevenYears', models.IntegerField(choices=[(0, '4 or more prior rental evictions'), (1, '2-3 prior rental evictions'), (2, '1 prior rental eviction'), (3, 'No prior rental eviction (0 points)')])),
                ('CurrentlyAtRiskOfLosingATenantBasedHousingSubsidy', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('HistoryOfLiteralHomelessness', models.IntegerField(choices=[(0, '4 or more times or total of at least 12 months in past three years'), (1, '2-3 times in past three years'), (2, '1 time in past three years'), (3, 'None (0 points)')])),
                ('HeadOfHouseholdWithDisablingCondition', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('CriminalRecordForArsonDrugDealing', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('RegisteredSexOffender', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('AtLeastOneDependentChildUnderAgeSix', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('SingleParentWithMinorChild', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('HouseholdSizeOfFiveOrMore', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('AnyVeteranInHouseholdServedInIraqOrAfghanistan', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('FemaleVeteran', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('HPApplicantTotalPoints', models.IntegerField()),
                ('GranteeTargetingThresholdScore', models.IntegerField()),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='SSVFHPTargetingCriteria_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='SocialWorker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clearanceLevel', models.TextField(choices=[('greeter', 'Greeter'), ('caseworker', 'CaseWorker'), ('service_provider', 'Service Provider Employee'), ('client', 'Client'), ('admin', 'Admin')])),
                ('address', models.CharField(max_length=500)),
                ('serviceProvider', models.TextField(choices=[('FP', 'Food Pantry'), ('DIC', 'Drop-in Centre'), ('SH', 'Shelter Home'), ('SK', 'Soup Kitchen'), ('NA', 'Not Available'), ('OTH', 'Others')])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SexualOrientation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('SexualOrientation', models.IntegerField(choices=[(1, 'Heterosexual'), (2, 'Gay'), (3, 'Lesbian'), (4, 'Bisexual'), (5, 'Questioning / Unsure'), (6, 'Others'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('Description', models.TextField()),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='SexualOrientation_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='ServicesProvidedSSVF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateOfService', models.DateField()),
                ('TypeOfService', models.IntegerField(choices=[(1, 'Outreach services'), (2, 'Case management services'), (3, 'Assistance obtaining VA benefits'), (4, 'Assistance obtaining/coordinating other public benefits'), (5, 'Direct provision of other public benefits'), (6, 'Other (non TFA)supportive service approved by VA'), (7, 'Extended Shallow Subsidy'), (8, 'Returning Home'), (9, 'Rapid Resolution')])),
                ('IfAssistanceObtainingVABenefits', models.IntegerField(choices=[(1, 'VA vocational and rehabilitation counseling'), (2, 'Employment and training services'), (3, 'Educational assistance'), (4, 'Health care services')])),
                ('IfAssistanceObtainingOrCoordinatingOtherPublicBenefits', models.IntegerField(choices=[(1, 'Health care services'), (2, 'Daily living services'), (3, 'Personal financial planning services'), (4, 'Transportation services'), (5, 'Income support services'), (6, 'Fiduciary and representative payee services'), (7, 'Legal services - child support'), (8, 'Legal services - eviction prevention'), (9, 'Legal services - outstanding fines and penalties'), (10, 'Legal services - restore/acquire drivers license'), (11, 'Legal services - other'), (12, 'Child care'), (13, 'Housing counseling')])),
                ('IfDirectProvisionOfOtherPublicBenefits', models.IntegerField(choices=[(1, 'Personal financial planning services'), (2, 'Transportation services'), (3, 'Income support services'), (4, 'Fiduciary and representative payee services'), (5, 'Legal services - child support'), (6, 'Legal services - eviction prevention'), (7, 'Legal services - outstanding fines and penalties'), (8, 'Legal services - restore/acquire drivers license'), (9, 'Legal services - other'), (10, 'Child care'), (11, 'Housing counseling')])),
                ('IfOtherSupportiveServiceApprovedByVA', models.TextField()),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='ServicesProvidedSSVF_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='PercentOfAMI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('HouseholdIncomeAsAPercentageOfAMI', models.IntegerField(choices=[(1, 'Less than 30%'), (2, '30% to 50%'), (3, 'Greater than 50%')])),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='PercentOfAMI_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='NonCashBenefits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('InformationDate', models.DateField()),
                ('BenefitsFromAnySource', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('SNAP', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('WIC', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('TANFChildCare', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('TANFTransportation', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('OtherTANF', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('OtherSource', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('SpecifySource', models.CharField(max_length=50)),
                ('RentalAssistanceOngoing', models.IntegerField(null=True)),
                ('RentalAssistanceTemp', models.IntegerField(null=True)),
                ('DataCollectionStage', models.IntegerField(null=True)),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='NonCashBenefits_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalAssistanceHOPWA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('InformationDate', models.DateField()),
                ('ReceivingPublicHIVAIDSMedicalAssistance', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('IfNoReason', models.IntegerField(choices=[(1, 'Applied; decision pending'), (2, 'Applied; client not eligible'), (3, 'Client did not apply '), (4, 'Insurance type N/A for this client'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('ReceivingAIDSDrugAssistanceProgram', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='MedicalAssistanceHOPWA_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('serviceProvider', models.TextField(choices=[('FP', 'Food Pantry'), ('DIC', 'Drop-in Centre'), ('SH', 'Shelter Home'), ('SK', 'Soup Kitchen'), ('NA', 'Not Available'), ('OTH', 'Others')])),
                ('clientName', models.CharField(blank=True, default='', max_length=500)),
                ('personalId', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='Log_PersonalId', to='StreetCardServices.Homeless')),
            ],
        ),
        migrations.CreateModel(
            name='LastPermanentAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('StreetAddress', models.TextField()),
                ('City', models.TextField()),
                ('State', models.TextField()),
                ('ZipCode', models.TextField()),
                ('AddressDataQuality', models.IntegerField(choices=[(1, 'Full address reported'), (2, 'Incomplete or estimated address reported'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='LastPermanentAddress_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='LastGradeCompleted',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LastGradeCompleted', models.IntegerField(choices=[(1, 'Less than Grade 5'), (2, 'Grades 5-6'), (3, 'Grades 7-8 '), (4, 'Grades 9-11'), (5, 'Grade 12/High school diploma'), (6, 'School program does not have grade levels'), (7, 'GED'), (10, 'Some college'), (11, 'Associates degree'), (12, 'Bachelors degree'), (13, 'Graduate degree'), (14, 'Vocational Certification'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='LastGradeCompleted_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='IncomeAndSources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('InformationDate', models.DateField()),
                ('IncomeFromAnySources', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('Earned', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0)),
                ('EarnedIncome', models.IntegerField(default=0)),
                ('Unemployment', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0)),
                ('UnemploymentAmount', models.IntegerField(null=True)),
                ('SSI', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('SSIAmount', models.IntegerField(null=True)),
                ('SSDI', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('SSDIAmount', models.IntegerField(null=True)),
                ('VADisabilityService', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('VADisabilityServiceAmount', models.IntegerField(null=True)),
                ('VADisabilityNonService', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('VADisabilityNonServiceNonAmount', models.IntegerField(null=True)),
                ('PrivateDisability', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('PrivateDisabilityAmount', models.IntegerField(null=True)),
                ('WorkersComp', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('WorkersCompAmount', models.IntegerField(null=True)),
                ('TANF', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('TANFAmount', models.IntegerField(null=True)),
                ('GA', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('GAAmount', models.IntegerField(null=True)),
                ('SocSecRetirement', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('SocSecRetirementAmount', models.IntegerField(null=True)),
                ('Pension', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('PensionAmount', models.IntegerField(null=True)),
                ('ChildSupport', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('ChildSupportAmount', models.IntegerField(null=True)),
                ('Alimony', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('AlimonyAmount', models.IntegerField(null=True)),
                ('OtherIncomeSources', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('OtherIncomeSourcesAmount', models.IntegerField(null=True)),
                ('OtherIncomeSourcesIdentify', models.TextField(blank=True, max_length=50, null=True)),
                ('TotalMonthlyIncome', models.IntegerField(default=0)),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='IncomeAndSources_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='HUDVASHVoucherTracking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('InformationDate', models.DateField()),
                ('VoucherChange', models.IntegerField(choices=[(1, 'Referral package forwarded to PHA'), (2, 'Voucher denied by PHA'), (3, 'Voucher issued by PHA'), (4, 'Voucher revoked or expired'), (5, 'Voucher in use- veteran moved into housing'), (6, 'Voucher was ported locally'), (7, 'Voucher was administratively absorbed by new PHA'), (8, 'Voucher was converted to Housing Choice Voucher'), (9, 'Veteran exited - voucher was returned'), (10, '0 Veteran exited - family maintained the voucher'), (11, 'Veteran exited - prior to ever receiving a voucher'), (12, 'Other')])),
                ('IfOther', models.TextField()),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='HUDVASHVoucherTracking_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='HUDVASHExitInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('CaseManagementExitReason', models.IntegerField(choices=[(1, 'Accomplished goals and /or obtained services and no longer needs CM'), (2, 'Transferred to another HUD - VASH program site'), (3, 'Found/chose other housing'), (4, 'Did not comply with HUD - VASH CM'), (5, 'Eviction and/or other housing related issues'), (6, 'Unhappy with HUD-VASH housing'), (7, 'No longer financially eligible for HUD-VASH voucher'), (8, 'No longer interested in participating in this program'), (9, 'Veteran cannot be located'), (10, 'Veteran too ill to participate at this time'), (11, 'Veteran is incarcerated'), (12, 'Veteran is deceased'), (13, 'Other')])),
                ('IfOther', models.TextField()),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='HUDVASHExitInformation_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='HousingAssessmentAtExitHOPWA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('HousingAssessmentAtExit', models.IntegerField(choices=[(1, 'Able to maintain the housing they had at project entry'), (2, 'Moved to new housing unit'), (3, 'Moved in with family/friends on a temporary basis'), (4, 'Moved in with family/friends on a permanent basis'), (5, ' Moved to a transitional or temporary housing facility or program'), (6, 'Client became homeless - moving to a shelter or other place unfit for human habitation'), (7, 'Client went to jail/prison'), (10, 'Client Died'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('SubsidyInformation', models.IntegerField(choices=[(1, 'Without_a_subsidy'), (2, 'With the subsidy they had at project entry'), (3, 'With an ongoing subsidy acquired since project entry'), (4, 'Only with financial assistance other than a subsidy')])),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='HousingAssessmentAtExitHOPWA_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='HealthInsurance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('InformationDate', models.DateField()),
                ('CoveredByHealthInsurance', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('Medicaid', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('Medicare', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('SCHIP', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('VAMedicalServices', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('EmployerProvided', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('COBRA', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('PrivatePay', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('StateHealthInsuranceForAdults', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('IndianHealthServices', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('OtherInsurance', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('SpecifySource', models.CharField(max_length=50)),
                ('Reason', models.TextField(choices=[(1, 'Applied;decision pending'), (2, 'Applied;client not eligible'), (3, 'Client did not apply'), (4, 'Insurance type N/A for this client'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='HealthInsurance_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='FinancialAssistanceSSVF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateOfFinancialAssistance', models.DateField()),
                ('FinancialAssistanceAmount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('FinancialAssistanceType', models.IntegerField(choices=[(1, 'Rental assistance'), (2, 'Security deposit'), (3, 'Utility deposit'), (4, 'Utility fee payment assistance'), (5, 'Moving costs'), (8, 'Transportation services: token/vouchers'), (9, 'Transportation services: vehicle repair/maintenance'), (10, 'Child care'), (11, 'General housing stability assistance - emergency supplies'), (12, 'General housing stability assistance - other'), (14, 'Emergency housing assistance'), (15, 'Extended Shallow Subsidy - Rental Assistance')])),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='FinancialAssistanceSSVF_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='FinancialAssistanceHOPWA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateOfFinancialAssistance', models.DateField()),
                ('FinancialAssistanceType', models.IntegerField(choices=[(1, 'Rental assistance'), (2, 'Security deposits'), (3, 'Utility deposits'), (4, 'Utility payments'), (7, 'Mortgage assistance')])),
                ('FinancialAssistanceAmount', models.IntegerField(default=0)),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='FinancialAssistanceHOPWA_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.AddField(
            model_name='enrollment',
            name='PersonalId',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='Enrollment_PersonalId', to='StreetCardServices.Homeless'),
        ),
        migrations.CreateModel(
            name='EmploymentStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('InformationDate', models.DateField()),
                ('Employed', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('TypeOfEmployment', models.IntegerField(choices=[(1, 'Full-time'), (2, 'Part-time')])),
                ('WhyNotEmployed', models.IntegerField(choices=[(1, ' WhyNotEmployedCategory'), (2, 'Unable to work'), (3, 'Not looking for work')])),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='EmploymentStatus_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='DomesticViolence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('InformationDate', models.DateField()),
                ('DomesticViolenceVictim', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')])),
                ('WhenOccurred', models.IntegerField(choices=[(1, 'Past 3 Months'), (2, 'Three to six months ago'), (3, 'Six Months to One year'), (4, 'One year or more'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('CurrentlyFleeing', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('EnrollmentID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DomesticViolence_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='DisablingCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('InformationDate', models.DateField()),
                ('physical_disability', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')], default=None, null=True)),
                ('physical_disability_impairing', models.IntegerField(blank=True, choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')], default=None, null=True)),
                ('developmental_disability', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')], default=None, null=True)),
                ('developmental_disability_impairing', models.IntegerField(blank=True, choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')], default=None, null=True)),
                ('chronic_health', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')], default=None, null=True)),
                ('chronic_health_impairing', models.IntegerField(blank=True, choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')], default=None, null=True)),
                ('hiv_aids', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')], default=None, null=True)),
                ('hiv_aids_impairing', models.IntegerField(blank=True, choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')], default=None, null=True)),
                ('mental_health', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')], default=None, null=True)),
                ('mental_health_impairing', models.IntegerField(blank=True, choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')], default=None, null=True)),
                ('substance_abuse', models.IntegerField(choices=[(0, 'No'), (1, 'Alcohol'), (2, 'Drug'), (3, 'Both Drug and Alcohol'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')], default=None, null=True)),
                ('substance_abuse_impairing', models.IntegerField(blank=True, choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')], default=None, null=True)),
                ('EnrollmentID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DisablingCondition_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='DateOfEngagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateOfEngagement', models.DateField()),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='DateOfEngagement_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='CurrentLivingSituation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('InformationDate', models.DateField()),
                ('CurrentLivingSituation', models.IntegerField(choices=[(1, 'Homeless'), (2, 'Institutional Housing'), (3, 'Temporary or Permanent Housing'), (4, 'Other')])),
                ('VerifiedByProject', models.TextField(choices=[('HUD:CoC-HomelessPrevention', 'HUD:CoC-HomelessPrevention'), ('HUD:COC-Permanent Supportive Housing', 'HUD:COC-Permanent Supportive Housing'), ('HUD:COC-Rapid Re-Housing', 'HUD:COC-Rapid Re-Housing'), ('HUD:CoC - Supportive Services Only', 'HUD:CoC - Supportive Services Only'), ('HUD:CoC - SSO Coordinated Entry', 'HUD:CoC - SSO Coordinated Entry'), ('HUD:CoC - Traditional Housing', 'HUD:CoC - Traditional Housing'), ('HUD:CoC - Safe Haven', 'HUD:CoC - Safe Haven'), ('HUD:CoC - Single Room Occupancy', 'HUD:CoC - Single Room Occupancy'), ('HUD:CoC - Youth Homeless Demonstration Program', 'HUD:CoC - Youth Homeless Demonstration Program'), ('HUD:CoC - Joint Component TH/RRH', 'HUD:CoC - Joint Component TH/RRH'), ('HUD:HOPWA – Hotel/Motel Vouchers', 'HUD:HOPWA – Hotel/Motel Vouchers'), ('HUD:HOPWA – Housing Information', 'HUD:HOPWA – Housing Information'), ('HUD:HOPWA – Permanent Housing (facility based or TBRA)', 'HUD:HOPWA – Permanent Housing (facility based or TBRA)'), ('HUD:HOPWA – Permanent Housing Placement', 'HUD:HOPWA – Permanent Housing Placement'), ('HUD:HOPWA – Short-Term Rent, Mortgage, Utility assistance', 'HUD:HOPWA – Short-Term Rent, Mortgage, Utility assistance'), ('HUD:HOPWA – Short-Term Supportive Facility', 'HUD:HOPWA – Short-Term Supportive Facility'), ('HUD:HOPWA – Transitional Housing', 'HUD:HOPWA – Transitional Housing'), ('VA: HCHV CRS - EH', 'VA: HCHV CRS - EH'), ('VA: HCHV - Low Demand Safe Haven', 'VA: HCHV - Low Demand Safe Haven'), ('VA:Grant Per Diem – Bridge Housing', 'VA:Grant Per Diem – Bridge Housing'), ('VA:Grant Per Diem – Low Demand', 'VA:Grant Per Diem – Low Demand'), ('VA:Grant Per Diem – Hospital to Housing', 'VA:Grant Per Diem – Hospital to Housing'), ('VA:Grant Per Diem – Clinical Treatment', 'VA:Grant Per Diem – Clinical Treatment'), ('VA:Grant Per Diem – Service Intensive Transitional Housing', 'VA:Grant Per Diem – Service Intensive Transitional Housing'), ('VA:Grant Per Diem – Transition in Place', 'VA:Grant Per Diem – Transition in Place'), ('VA:Grant Per Diem – Case Management / Housing Retention', 'VA:Grant Per Diem – Case Management / Housing Retention'), ('VA: SSVF - Homelessness Prevention', 'VA: SSVF - Homelessness Prevention'), ('VA: SSVF - Rapid Re-Housing', 'VA: SSVF - Rapid Re-Housing')])),
                ('HasToLeaveCurrentSituation', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('HasASubsequentResidence', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('HasResourcesToObtainPermanentHousing', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('OwnershipInPermanentHousing', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('HasClientMoved', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('LocationDetails', models.TextField(blank=True, null=True)),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='CurrentLivingSituation_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='CoordinatedEntryEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateOfEvent', models.DateField()),
                ('Event', models.IntegerField(choices=[(1, 'Referral to a Prevention Assistance project'), (2, 'Problem Solving/Diversion/Rapid Resolution intervention or service'), (3, 'Scheduled Coordinated Entry Crisis Assessment'), (4, 'Scheduled Coordinated Entry Housing Needs Assessment'), (5, 'Post Placement/ Follow-up Case Management'), (6, 'Street Outreach Project or Services'), (7, 'Housing Navigation Project or Services'), (8, 'Ineligible for continuum services'), (9, 'No availability in continuum services'), (10, 'Emergency Shelter bed opening'), (11, 'Transitional Housing bed/unit opening'), (12, 'Joint TH-RRH project/unit/resource opening'), (13, 'RRH Project Resource Opening'), (14, 'PSH Project Resource Opening'), (15, 'Other Project/Unit/Resource Opening')])),
                ('ClientHousedOrReHoused', models.CharField(choices=[(0, 'No'), (1, 'Yes')], max_length=3)),
                ('EnrolledInAfterCareProject', models.CharField(choices=[(0, 'No'), (1, 'Yes')], max_length=3)),
                ('LocationOfHousing', models.TextField(choices=[('HUD:CoC-HomelessPrevention', 'HUD:CoC-HomelessPrevention'), ('HUD:COC-Permanent Supportive Housing', 'HUD:COC-Permanent Supportive Housing'), ('HUD:COC-Rapid Re-Housing', 'HUD:COC-Rapid Re-Housing'), ('HUD:CoC - Supportive Services Only', 'HUD:CoC - Supportive Services Only'), ('HUD:CoC - SSO Coordinated Entry', 'HUD:CoC - SSO Coordinated Entry'), ('HUD:CoC - Traditional Housing', 'HUD:CoC - Traditional Housing'), ('HUD:CoC - Safe Haven', 'HUD:CoC - Safe Haven'), ('HUD:CoC - Single Room Occupancy', 'HUD:CoC - Single Room Occupancy'), ('HUD:CoC - Youth Homeless Demonstration Program', 'HUD:CoC - Youth Homeless Demonstration Program'), ('HUD:CoC - Joint Component TH/RRH', 'HUD:CoC - Joint Component TH/RRH'), ('HUD:HOPWA – Hotel/Motel Vouchers', 'HUD:HOPWA – Hotel/Motel Vouchers'), ('HUD:HOPWA – Housing Information', 'HUD:HOPWA – Housing Information'), ('HUD:HOPWA – Permanent Housing (facility based or TBRA)', 'HUD:HOPWA – Permanent Housing (facility based or TBRA)'), ('HUD:HOPWA – Permanent Housing Placement', 'HUD:HOPWA – Permanent Housing Placement'), ('HUD:HOPWA – Short-Term Rent, Mortgage, Utility assistance', 'HUD:HOPWA – Short-Term Rent, Mortgage, Utility assistance'), ('HUD:HOPWA – Short-Term Supportive Facility', 'HUD:HOPWA – Short-Term Supportive Facility'), ('HUD:HOPWA – Transitional Housing', 'HUD:HOPWA – Transitional Housing'), ('VA: HCHV CRS - EH', 'VA: HCHV CRS - EH'), ('VA: HCHV - Low Demand Safe Haven', 'VA: HCHV - Low Demand Safe Haven'), ('VA:Grant Per Diem – Bridge Housing', 'VA:Grant Per Diem – Bridge Housing'), ('VA:Grant Per Diem – Low Demand', 'VA:Grant Per Diem – Low Demand'), ('VA:Grant Per Diem – Hospital to Housing', 'VA:Grant Per Diem – Hospital to Housing'), ('VA:Grant Per Diem – Clinical Treatment', 'VA:Grant Per Diem – Clinical Treatment'), ('VA:Grant Per Diem – Service Intensive Transitional Housing', 'VA:Grant Per Diem – Service Intensive Transitional Housing'), ('VA:Grant Per Diem – Transition in Place', 'VA:Grant Per Diem – Transition in Place'), ('VA:Grant Per Diem – Case Management / Housing Retention', 'VA:Grant Per Diem – Case Management / Housing Retention'), ('VA: SSVF - Homelessness Prevention', 'VA: SSVF - Homelessness Prevention'), ('VA: SSVF - Rapid Re-Housing', 'VA: SSVF - Rapid Re-Housing')])),
                ('ReferralResult', models.IntegerField(choices=[(1, 'Successful Referral: Client Accepted'), (2, 'Unsuccessful Referral: Client Rejected'), (3, 'Unsuccessful Referral: Provider Rejected')])),
                ('DateOfResult', models.DateField()),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='CoordinatedEntryEvent_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='CoordinatedEntryAssessment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateOfAssessment', models.DateField()),
                ('AssessmentLocation', models.TextField(max_length=250)),
                ('AssessmentType', models.IntegerField(choices=[(1, 'Phone'), (2, 'Virtual'), (3, 'In Person')])),
                ('AssessmentLevel', models.IntegerField(choices=[(1, 'Crisis Need Assessment'), (2, 'Housing Need Assessment')])),
                ('AssessmentQuestion', models.TextField(max_length=250)),
                ('AssessmentAnswer', models.TextField(max_length=250)),
                ('AssessmentResultType', models.TextField(max_length=250)),
                ('AssessmentResult', models.TextField(max_length=250)),
                ('PrioritizationStatus', models.IntegerField(choices=[(1, 'On Priority List'), (2, 'Not on Priority List')])),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='CoordinatedEntryAssessment_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='ConnectionWithSOAR',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ConnectionWithSOAR', models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (8, "Client Doesn't Know"), (9, 'Client Refused'), (99, 'Data Not Collected')])),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='ConnectionWithSOAR_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='BedNightDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('BedNightDate', models.DateField()),
                ('EnrollmentID', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='BedNightDate_EnrollmentID', to='StreetCardServices.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='Appointments',
            fields=[
                ('appointmentId', models.CharField(default=None, max_length=32, primary_key=True, serialize=False)),
                ('office', models.CharField(blank=True, max_length=500)),
                ('streetAddress1', models.CharField(blank=True, max_length=500)),
                ('streetAddress2', models.CharField(blank=True, max_length=500, null=True)),
                ('city', models.CharField(blank=True, max_length=500)),
                ('zipCode', models.CharField(blank=True, max_length=500)),
                ('state', models.CharField(blank=True, max_length=500)),
                ('Time', models.TimeField()),
                ('Date', models.DateField()),
                ('serviceProvider', models.TextField(choices=[('FP', 'Food Pantry'), ('DIC', 'Drop-in Centre'), ('SH', 'Shelter Home'), ('SK', 'Soup Kitchen'), ('NA', 'Not Available'), ('OTH', 'Others')])),
                ('alert', models.BooleanField(default=False, null=True)),
                ('Email', models.EmailField(blank=True, max_length=70, null=True)),
                ('TimeZone', models.CharField(blank=True, max_length=200, null=True)),
                ('AlertTaskID', models.CharField(blank=True, default='', max_length=36, null=True)),
                ('personalId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='StreetCardServices.Homeless')),
            ],
        ),
    ]
